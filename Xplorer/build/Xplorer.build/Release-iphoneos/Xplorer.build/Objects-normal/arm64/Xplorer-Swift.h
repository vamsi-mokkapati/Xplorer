// Generated by Apple Swift version 4.0.2 (swiftlang-900.0.69.2 clang-900.0.38)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import CoreLocation;
@import GooglePlaces;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("Xplorer")
@class UIWindow;
@class UIApplication;

/// The AppDelegate is responsible for all main operation of the app.  It is a Singleton instance that maintains state for the whole app.
/// It extends UIResponder and implements UIApplicationDelegate.
/// Note about properties:
/// <ul>
///   <li>
///     <code>window</code> is a UIWindow that specifies the window space of the application
///   </li>
///   <li>
///     <code>locationManager</code> is necessary to start and stop the delivery of location-related events to the app
///   </li>
/// </ul>
SWIFT_CLASS("_TtC7Xplorer11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * _Nullable window;
/// This method is used for when the application starts up.
/// We provide the GMSServices and GMSPlacesClientAPI keys here.
/// \param application The centralized point of control and coordination for iOS apps.  There is one instance of a UIApplication for every app.
///
/// \param launchOptions Any specified launch options.
///
///
/// returns:
/// true
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
/// This method is sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
/// This method can be used to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks.
/// \param application The centralized point of control and coordination for iOS apps.  There is one instance of a UIApplication for every app.
///
///
/// returns:
/// void
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
/// This method is used to release shared resources, save user data, invalidate timers, and store enough application state information to restore the application to its current state in case it is terminated later.
/// If the app supports background execution, this method is called instead of <code>applicationWillTerminate()</code> when the user quits.
/// \param application The centralized point of control and coordination for iOS apps.  There is one instance of a UIApplication for every app.
///
///
/// returns:
/// void
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
/// This method is called as part of the transition from the background to the active state; here we can undo many of the changes made on entering the background.
/// \param application The centralized point of control and coordination for iOS apps.  There is one instance of a UIApplication for every app.
///
///
/// returns:
/// void
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
/// This method is used to restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
/// \param application The centralized point of control and coordination for iOS apps.  There is one instance of a UIApplication for every app.
///
///
/// returns:
/// void
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
/// Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
/// \param application The centralized point of control and coordination for iOS apps.  There is one instance of a UIApplication for every app.
///
///
/// returns:
/// void
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIStoryboardSegue;
@class NSBundle;
@class NSCoder;

/// The MapViewController is the main view controller for our app.  It prominently displays the map and is used to show the user’s selected itinerary.
/// MapViewController extends UIViewController.
/// Properties:
/// <ul>
///   <li>
///     <code>currentLocation</code>:      a CLLocation that specifies the current location.
///   </li>
///   <li>
///     <code>mapView</code>:              the main GMS mapview.  This is the view that is displayed full screen in this controller.
///   </li>
///   <li>
///     <code>placesClient</code>:         a GMSPlacesClient variable so that we can make use of the Google Places API.
///   </li>
///   <li>
///     <code>zoomLevel</code>:            indicates the zoom level of the map.
///   </li>
///   <li>
///     <code>appDelegate</code>:          a reference back to the app’s AppDelegate object.
///   </li>
///   <li>
///     <code>defaultLocation</code>:      if the app is running in simulator mode, or if the user has not accepted location preferences, the map begins at Apple’s headquarters.
///   </li>
/// </ul>
/// Navigation:
/// <ul>
///   <li>
///     override func prepare (for segue: UIStoryboardSegue, sender: Any?): This method lets you prepare the view controller before it’s presented
///   </li>
/// </ul>
/// Actions:
/// <ul>
///   <li>
///     @IBAction func unwindToMapView(sender: UIStoryboardSegue): This method allows the TimeAndLocationViewController to unwind to this view controller.
///   </li>
/// </ul>
/// Additional methods:
/// addMarker(place: GMSPlace!, type: String): This method adds a marker to the map.
/// Delegates:
/// <ul>
///   <li>
///     CLLocationManagerDelegate:  The MapViewController has to implement the CLLocationManagerDelegate.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC7Xplorer17MapViewController")
@interface MapViewController : UIViewController
/// This method is called when the view is loaded.
/// We have overriden it to:
/// <ul>
///   <li>
///     Initialize the locationManager object.
///   </li>
///   <li>
///     Initialize the placesClient object.
///   </li>
///   <li>
///     Create a map to show:
///   </li>
/// </ul>
/// <ul>
///   <li>
///     camera view
///   </li>
///   <li>
///     map view
///   </li>
///   <li>
///     center location button
///   </li>
///   <li>
///     current location
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Add the map to the view
///   </li>
/// </ul>
///
/// returns:
/// void
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
/// This method is used for the “Done” button in the TimeAndLocationViewController.
/// Because we want to get back to this view, we need to unwind from the TimeAndLocationViewController.
/// To prepare to unwind, we:
/// <ul>
///   <li>
///     Get the start and end places as GMSPlace objects
///   </li>
///   <li>
///     Get the start and end times from the <code>UIDatePicker</code> objects in the TimeAndLocationViewController.
///   </li>
///   <li>
///     Add markers to the map, specifying the start and end locations that the user selected.
///   </li>
/// </ul>
/// The method is specified with an @IBAction tag to denote that it is an action that an UI element can be linked to.
/// \param sender The sender is the object that prepares for and performs the visual transition between two view controllers.  It supports all visual transitions that have been defined in UIKit.
///
///
/// returns:
/// void
- (IBAction)unwindToMapViewWithSender:(UIStoryboardSegue * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;
@class CLLocation;

@interface MapViewController (SWIFT_EXTENSION(Xplorer)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end

@class UITextField;
@class UIDatePicker;
@class UIBarButtonItem;
@class GMSAutocompleteViewController;
@class GMSPlace;

/// This class is used as the Time and Location Input Controller for the user.
/// It is in this view that the user is able to select a start location, start time, end location, and end time.
/// This class extends UIViewController and implements UITextFieldDelegate and GMSAutocompleteViewControllerDelegate.
/// Properties:
/// <ul>
///   <li>
///     <code>lastUITextFieldSelected</code>:      This property represents the last text field that the user selected and indicates to the view whether to place the user’s searched location in the start or end text field.
///   </li>
///   <li>
///     <code>startPlace</code>:                   This property represents the GMSPlace that is the start.
///   </li>
///   <li>
///     <code>endPlace</code>:                     This property represents the GMSPlace that is the end.
///   </li>
///   <li>
///     <code>startTimeInfo</code>:                This property represents the time-zone agnostic start time from a UIDatePicker.
///   </li>
///   <li>
///     <code>endTimeInfo</code>:                  This property represents the time-zone agnostic end time from a UIDatePicker.
///   </li>
/// </ul>
/// Outlets:
/// <ul>
///   <li>
///     startLocation:  UITextField that holds the start location.
///   </li>
///   <li>
///     endLocation:    UITextField that holds the end location.
///   </li>
///   <li>
///     startTime:      UIDatePicker that holds the start time.
///   </li>
///   <li>
///     endTime:        UIDatePicker that holds the end time.
///   </li>
///   <li>
///     doneButton:     UIBarButtonItem that sits to the right in the navigation bar and only activates once the user has selected valid start and end locations.
///   </li>
/// </ul>
/// Constants:
/// <ul>
///   <li>
///     appDelegate:    This is a reference to the application’s AppDelegate object.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC7Xplorer29TimeAndLocationViewController")
@interface TimeAndLocationViewController : UIViewController <GMSAutocompleteViewControllerDelegate, UITextFieldDelegate>
@property (nonatomic, weak) IBOutlet UITextField * _Null_unspecified startLocation;
@property (nonatomic, weak) IBOutlet UITextField * _Null_unspecified endLocation;
@property (nonatomic, weak) IBOutlet UIDatePicker * _Null_unspecified startTime;
@property (nonatomic, weak) IBOutlet UIDatePicker * _Null_unspecified endTime;
@property (nonatomic, weak) IBOutlet UIBarButtonItem * _Null_unspecified doneButton;
/// This method is called when the view is loaded.
/// We have overriden it to:
/// <ul>
///   <li>
///     Initially disable the “Done” button.
///   </li>
///   <li>
///     Set this class as the delegate for the start and end UITextField objects.
///   </li>
/// </ul>
///
/// returns:
/// void
- (void)viewDidLoad;
/// This method is used to dispose of any resources that can be recreated in the event of a memory warning.
/// - Returns: void
- (void)didReceiveMemoryWarning;
/// This function is invoked whenever the GMSAutocompleteView loads after tapping on either startLocation or endLocation.
/// If both the startPlace and the endPlace are valid, then the “Done” button is activated.
/// The view controller dismisses itself after a valid user selection.
/// \param viewController This object refers to the GMS-specific view controller that called this method.
///
/// \param place This object refers to the user’s selection in the autofill suggestions.
///
///
/// returns:
/// void
- (void)viewController:(GMSAutocompleteViewController * _Nonnull)viewController didAutocompleteWithPlace:(GMSPlace * _Nonnull)place;
- (void)viewController:(GMSAutocompleteViewController * _Nonnull)viewController didFailAutocompleteWithError:(NSError * _Nonnull)error;
/// This method is called when the user cancels entering text.
/// This method is one of the GMSAutocompleteViewControllerDelegate methods.
/// \param viewController This object refers to the GMS-specific view controller that called this method.
///
///
/// returns:
/// void
- (void)wasCancelled:(GMSAutocompleteViewController * _Nonnull)viewController;
/// This method is the action handler (and is specified with @IBAction) for the startLocation UITextField.
/// \param sender This object represents the specific UITextField that was tapped on.
///
///
/// returns:
/// void
- (IBAction)openSearchAddressStartPlace:(UITextField * _Nonnull)sender;
/// This method is the action handler (and is specified with @IBAction) for the endLocation UITextField.
/// \param sender This object represents the specific UITextField that was tapped on.
///
///
/// returns:
/// void
- (IBAction)openSearchAddressEndPlace:(UITextField * _Nonnull)sender;
/// This method is one of the methods that should be implemented for UITextFieldDelegate.
/// It specifies what to do when the user presses “Enter”.
/// \param textField The UITextField whose return button was pressed.
///
///
/// returns:
/// true
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// This method tells the delegate that editing stopped for the specified text field.
/// \param textField The UITextField for which editing ended.
///
///
/// returns:
/// void
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
/// This method is used to prepare for a segue.  It notifies the view controller that a segue is about to be performed.
/// The method checks to see if the sender was a UIBarButtonItem (in this case “Done”) and then sets the startTimeInfo and endTimeInfo objects to be relayed to the MapViewController upon the unwindToMapView() method in MapViewController.
/// \param segue The UIStoryboardSegue object that contains information about the view controllers involved in the segue.
///
/// \param sender The object that initiated the segue.  Based on what the sender is, the behavior of this function can be decided at runtime.
///
///
/// returns:
/// void
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
